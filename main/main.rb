# frozen_string_literal: true
require 'ruby_grammar_builder'
require 'walk_up'
require_relative walk_up_until("paths.rb")
require_relative './tokens.rb'

# 
# 
# create grammar!
# 
# 
grammar = Grammar.new(
    name: "V",
    scope_name: "source.v",
    fileTypes: [
        ".v",
		".vh",
		".vsh",
		".vv",
		"v.mod",
    ],
    version: "",
)

# 
#
# Setup Grammar
#
# 
    grammar[:$initial_context] = [
        # :comments,
        :as_is,
        # :attributes,
        # :assignment,
        # :module_decl,
        # :import_decl,
        # :hash_decl,
        # :brackets,
        # :builtin_fix,
        # :escaped_fix,
        # :operators,
        # :function_limited_overload_decl,
        # :function_extend_decl,
        # :function_decl,
        # :function_exist,
        # :generic,
        # :constants,
        # :type,
        # :enum,
        # :interface,
        # :struct,
        # :keywords,
        # :storage,
        # :numbers,
        # :strings,
        # :types,
        # :punctuations,
    ]

# 
# Helpers
# 
    part_of_a_variable = /[a-zA-Z_][a-zA-Z_0-9]*/
    # this is really useful for keywords. eg: variableBounds[/new/] wont match "newThing" or "thingnew"
    variableBounds = ->(regex_pattern) do
        lookBehindToAvoid(@standard_character).then(regex_pattern).lookAheadToAvoid(@standard_character)
    end
    variable = variableBounds[part_of_a_variable]

# 
# imports
# 
    grammar.import(PathFor[:pattern]["operators"])
    # grammar.import(PathFor[:pattern]["string"])
    # grammar.import(PathFor[:pattern]["numeric_literal"])
    
# 
# basic patterns
# 
    grammar[:as_is] = PatternRange.new(
        start_pattern: Pattern.new(
            @spaces.then(
                tag_as: "keyword.$match",
                match:  /as|is/,
            ).then(@spaces)
        ),
        end_pattern: Pattern.new(
            tag_as: "entity.name.alias",
            match: zeroOrMoreOf(/[\w.]/),
        ),
    )
    
    grammar[:assignment] = Pattern.new(
        tag_as: "meta.definition.variable",
        match: Pattern.new(
            @spaces.then(grammar[:assignment_operator]).then(@spaces)
        ),
    )



#
# Save
#
grammar.save_to(
    syntax_name: "vlang",
    syntax_dir: "./autogenerated",
    tag_dir: "./autogenerated",
)