{
  "version": "",
  "name": "V",
  "scopeName": "source.v",
  "fileTypes": [
    "",
    ".vh",
    ".vsh",
    ".vv",
    "v.mod"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#as_is"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#assignment"
    },
    {
      "include": "#module_decl"
    },
    {
      "include": "#import_decl"
    },
    {
      "include": "#hash_decl"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#builtin_fix"
    },
    {
      "include": "#escaped_fix"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#function_limited_overload_decl"
    },
    {
      "include": "#function_extend_decl"
    },
    {
      "include": "#function_decl"
    },
    {
      "include": "#function_exist"
    },
    {
      "include": "#generic"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#type"
    },
    {
      "include": "#enum"
    },
    {
      "include": "#interface"
    },
    {
      "include": "#struct"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#types"
    },
    {
      "include": "#punctuations"
    }
  ],
  "repository": {
    "as_is": {
      "begin": "(?:\\s)+(as|is)(?:\\s)+",
      "end": "[\\w.]*",
      "beginCaptures": {
        "1": {
          "name": "keyword.$1.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.alias.v"
        }
      }
    },
    "assignment": {
      "match": "(?:\\s)+((?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=)))(?:\\s)+",
      "captures": {
        "1": {
          "name": "keyword.operator.assignment.v"
        }
      },
      "name": "meta.definition.variable.v"
    },
    "assignment_operator": {
      "match": "(?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=))",
      "name": "keyword.operator.assignment.v"
    },
    "attributes": {
      "match": "^(?:(?:\\s)+)?((\\[)((?:(?:deprecated)|(?:unsafe_fn)|(?:console)|(?:heap)|(?:debug)|(?:manualfree)|(?:typedef)|(?:live)|(?:inline)|(?:flag)|(?:ref_only)|(?:windows_stdcall)|(?:direct_array_access)))(\\]))",
      "captures": {
        "1": {
          "name": "meta.function.attribute.v"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.v"
        },
        "3": {
          "name": "storage.modifier.attribute.v"
        },
        "4": {
          "name": "punctuation.definition.end.bracket.square.v"
        }
      },
      "name": "meta.definition.attribute.v"
    },
    "brackets": {
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.end.v"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.end.v"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.square.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.square.end.v"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "builtin_fix": {
      "patterns": [
        {
          "match": "const(?=\\s*\\()",
          "name": "storage.modifier.v"
        },
        {
          "match": "(?<!\\w)(?:(?:fn)|(?:type)|(?:typeof)|(?:enum)|(?:struct)|(?:interface)|(?:map)|(?:assert)|(?:sizeof)|(?:__offsetof))(?!\\w)(?=\\s*\\()",
          "name": "keyword.$0.v"
        },
        {
          "match": "(?:(?:\\$if)|(?:\\$else))(?=\\s*\\()",
          "name": "keyword.control.v"
        },
        {
          "match": "(?<!\\w)(?:(?:as)|(?:it)|(?:is)|(?:in)|(?:or)|(?:break)|(?:continue)|(?:default)|(?:unsafe)|(?:match)|(?:if)|(?:else)|(?:for)|(?:go)|(?:goto)|(?:defer)|(?:return)|(?:shared)|(?:select)|(?:rlock)|(?:lock)|(?:atomic)|(?:asm))(?!\\w)(?=\\s*\\()",
          "name": "keyword.control.v"
        },
        {
          "match": "(?<!\\w)(?:(?:int)|(?:i8)|(?:i16)|(?:i64)|(?:i128)|(?:u8)|(?:u16)|(?:u32)|(?:u64)|(?:u128)|(?:f32)|(?:f64))(?!\\w)(?=\\s*\\()",
          "name": "meta.expr.numeric.cast.v storage.type.numeric.v"
        },
        {
          "match": "bool|byte|byteptr|charptr|voidptr|string|rune|size_t(?=\\s*\\()",
          "name": "meta.expr.bool.cast.v storage.type.$0.v"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.v"
            }
          },
          "name": "comment.block.documentation.v",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "begin": "\\/\\/",
          "end": "(?:(?:\\n)|$)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.v"
            }
          },
          "endCaptures": {
          },
          "name": "comment.line.double-slash.v"
        }
      ]
    },
    "constants": {
      "match": "(?<!\\w)(?:(?:true)|(?:false)|(?:none))(?!\\w)",
      "name": "constant.language.v"
    },
    "escaped_fix": {
      "match": "(?:@)(?:mut|pub|fn|unsafe|module|import|as|const|map|assert|sizeof|__offsetof|typeof|type|struct|interface|enum|in|is|or|match|if|else|for|go|goto|defer|return|shared|select|rlock|lock|atomic|asm|i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64)|bool|byte|byteptr|charptr|voidptr|string|ustring|rune)",
      "name": "meta.escaped.keyword.v keyword.other.escaped.v"
    },
    "hash_decl": {
      "begin": "^(?:(?:\\s)+)?\\#",
      "end": "(?:(?:\\n)|$)",
      "beginCaptures": {
      },
      "endCaptures": {
      },
      "name": "markup.bold.v"
    },
    "import_decl": {
      "begin": "^(?:(?:\\s)+)?(import)(?:\\s)+",
      "end": "[\\w.]+",
      "beginCaptures": {
        "1": {
          "name": "keyword.import.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.import.v"
        }
      },
      "name": "meta.import.v"
    },
    "keywords": {
      "patterns": [
        {
          "match": "(?:(?:\\$if)|(?:\\$else))",
          "name": "keyword.control.v"
        },
        {
          "match": "(?<!\\w)(?:(?:as)|(?:it)|(?:is)|(?:in)|(?:or)|(?:break)|(?:continue)|(?:default)|(?:unsafe)|(?:match)|(?:if)|(?:else)|(?:for)|(?:go)|(?:goto)|(?:defer)|(?:return)|(?:shared)|(?:select)|(?:rlock)|(?:lock)|(?:atomic)|(?:asm))(?!\\w)",
          "name": "keyword.control.v"
        },
        {
          "match": "(?<!\\w)(?:(?:fn)|(?:type)|(?:typeof)|(?:enum)|(?:struct)|(?:interface)|(?:map)|(?:assert)|(?:sizeof)|(?:__offsetof))(?!\\w)",
          "name": "keyword.$0.v"
        }
      ]
    },
    "module_decl": {
      "begin": "^(?:(?:\\s)+)?(module)(?:\\s)+",
      "end": "[\\w.]+",
      "beginCaptures": {
        "1": {
          "name": "keyword.module.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.module.v"
        }
      },
      "name": "meta.module.v"
    },
    "numbers": {
      "patterns": [
        {
          "match": "(?:[0-9]+(?:_?))+(?:\\.)(?:[0-9]+[eE][-+]?[0-9]+)",
          "name": "constant.numeric.exponential.v"
        },
        {
          "match": "(?:[0-9]+(?:_?))+(?:\\.)(?:[0-9]+)",
          "name": "constant.numeric.float.v"
        },
        {
          "match": "(?:0b)(?:(?:[0-1]+)(?:_?))+",
          "name": "constant.numeric.binary.v"
        },
        {
          "match": "(?:0o)(?:(?:[0-7]+)(?:_?))+",
          "name": "constant.numeric.octal.v"
        },
        {
          "match": "(?:0x)(?:(?:[0-9a-fA-F]+)(?:_?))+",
          "name": "constant.numeric.hex.v"
        },
        {
          "match": "(?:(?:[0-9]+)(?:[_]?))+",
          "name": "constant.numeric.integer.v"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(?:(?:\\+\\+)|(?:\\-\\-)|(?:\\+)|(?:\\-)|(?:\\*)|(?:\\/)|%)",
          "name": "keyword.operator.arithmetic.v"
        },
        {
          "match": "(?:(?:==)|(?:!=)|(?:>=)|(?:<=)|(?<!>)>(?!>)|(?<!<)<(?!<))",
          "name": "keyword.operator.relation.v"
        },
        {
          "match": "(?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=))",
          "name": "keyword.operator.assignment.v"
        },
        {
          "match": "(?:&|(?:\\|)|(?:\\^)|~|(?:>>)|(?:<<))",
          "name": "keyword.operator.bitwise.v"
        },
        {
          "match": "(?:(?:&&)|(?:\\|\\|)|!)",
          "name": "keyword.operator.logical.v"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.optional.v"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": "\\.",
          "name": "punctuation.delimiter.period.dot.v"
        },
        {
          "match": ",",
          "name": "punctuation.delimiter.comma.v"
        },
        {
          "match": ":",
          "name": "punctuation.separator.key-value.colon.v"
        },
        {
          "match": ";",
          "name": "punctuation.definition.other.semicolon.v"
        },
        {
          "match": "\\?",
          "name": "punctuation.definition.other.questionmark.v"
        },
        {
          "match": "#",
          "name": "punctuation.hash.v"
        }
      ]
    },
    "punctuations": {
      "patterns": [
        {
          "match": "\\.",
          "name": "punctuation.accessor.v"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.v"
        }
      ]
    },
    "storage": {
      "match": "(?<!\\w)(?:(?:const)|(?:mut)|(?:pub))(?!\\w)",
      "name": "storage.modifier.v"
    },
    "types": {
      "patterns": [
        {
          "match": "(?<!\\.)(?<!\\w)(?:(?:int)|(?:i8)|(?:i16)|(?:i64)|(?:i128)|(?:u8)|(?:u16)|(?:u32)|(?:u64)|(?:u128)|(?:f32)|(?:f64))(?!\\w)",
          "name": "storage.type.numeric.v"
        },
        {
          "match": "(?<!\\.)(?<!\\w)(?:(?:bool)|(?:byte)|(?:byteptr)|(?:charptr)|(?:voidptr)|(?:string)|(?:ustring)|(?:rune))(?!\\w)",
          "name": "storage.type.$0.v"
        }
      ]
    }
  }
}