{
  "version": "",
  "name": "V",
  "scopeName": "source.v",
  "fileTypes": [
    "",
    ".vh",
    ".vsh",
    ".vv",
    "v.mod"
  ],
  "patterns": [
    {
      "include": "#as_is"
    }
  ],
  "repository": {
    "as_is": {
      "begin": "(?:\\s)+(as|is)(?:\\s)+",
      "end": "[\\w.]*",
      "beginCaptures": {
        "1": {
          "name": "keyword.$1.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.alias.v"
        }
      }
    },
    "assignment": {
      "match": "(?:\\s)+((?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=)))(?:\\s)+",
      "captures": {
        "1": {
          "name": "keyword.operator.assignment.v"
        }
      },
      "name": "meta.definition.variable.v"
    },
    "assignment_operator": {
      "match": "(?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=))",
      "name": "keyword.operator.assignment.v"
    },
    "attributes": {
      "match": "^(?:(?:\\s)+)?((\\[)((?:(?:deprecated)|(?:unsafe_fn)|(?:console)|(?:heap)|(?:debug)|(?:manualfree)|(?:typedef)|(?:live)|(?:inline)|(?:flag)|(?:ref_only)|(?:windows_stdcall)|(?:direct_array_access)))(\\]))",
      "captures": {
        "1": {
          "name": "meta.function.attribute.v"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.v"
        },
        "3": {
          "name": "storage.modifier.attribute.v"
        },
        "4": {
          "name": "punctuation.definition.end.bracket.square.v"
        }
      },
      "name": "meta.definition.attribute.v"
    },
    "brackets": {
      "patterns": [
        {
          "begin": "{",
          "end": "}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.end.v"
            }
          },
          "patterns": [
            {
              "include": "#$inital_context"
            }
          ]
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.end.v"
            }
          },
          "patterns": [
            {
              "include": "#$inital_context"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.square.begin.v"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.square.end.v"
            }
          },
          "patterns": [
            {
              "include": "#$inital_context"
            }
          ]
        }
      ]
    },
    "builtin_fix": {
      "patterns": [
        {
          "match": "const(?=\\s*\\()",
          "name": "storage.modifier.v"
        },
        {
          "match": "(?<!\\w)fn|type|enum|struct|union|interface|map|assert|sizeof|typeof|__offsetof(?!\\w)(?=\\s*\\()",
          "name": "keyword.$0.v"
        },
        {
          "match": "(?:(?:\\$if)|(?:\\$else))(?=\\s*\\()",
          "name": "keyword.control.v"
        },
        {
          "match": "(?<!\\w)as|in|is|or|break|continue|default|unsafe|match|if|else|for|go|goto|defer|return|shared|select|rlock|lock|atomic|asm(?!\\w)(?=\\s*\\()",
          "name": "keyword.control.v"
        },
        {
          "match": "i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64)(?=\\s*\\()",
          "name": "meta.expr.numeric.cast.v storage.type.numeric.v"
        },
        {
          "match": "(?<!\\w)bool|byte|byteptr|charptr|voidptr|string|rune|size_t(?!\\w)(?=\\s*\\()",
          "name": "meta.expr.bool.cast.v storage.type.$0.v"
        }
      ]
    },
    "hash_decl": {
      "begin": "^(?:(?:\\s)+)?\\#",
      "end": "(?:(?:\\n)|$)",
      "beginCaptures": {
      },
      "endCaptures": {
      },
      "name": "markup.bold.v"
    },
    "import_decl": {
      "begin": "^(?:(?:\\s)+)?(import)(?:\\s)+",
      "end": "[\\w.]+",
      "beginCaptures": {
        "1": {
          "name": "keyword.import.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.import.v"
        }
      },
      "name": "meta.import.v"
    },
    "module_decl": {
      "begin": "^(?:(?:\\s)+)?(module)(?:\\s)+",
      "end": "[\\w.]+",
      "beginCaptures": {
        "1": {
          "name": "keyword.module.v"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.module.v"
        }
      },
      "name": "meta.module.v"
    },
    "operators": {
      "patterns": [
        {
          "match": "(?:(?:\\+\\+)|(?:\\-\\-)|(?:\\+)|(?:\\-)|(?:\\*)|(?:\\/)|%)",
          "name": "keyword.operator.arithmetic.v"
        },
        {
          "match": "(?:(?:==)|(?:!=)|(?:>=)|(?:<=)|(?<!>)>(?!>)|(?<!<)<(?!<))",
          "name": "keyword.operator.relation.v"
        },
        {
          "match": "(?:(?::=)|=|(?:\\+=)|(?:\\-=)|(?:\\*=)|(?:\\/=)|(?:%=)|(?:&=)|(?:\\|=)|(?:\\^=)|(?:~=)|(?:&&=)|(?:\\|\\|=)|(?:>>=)|(?:<<=))",
          "name": "keyword.operator.assignment.v"
        },
        {
          "match": "(?:&|(?:\\|)|(?:\\^)|~|(?:>>)|(?:<<))",
          "name": "keyword.operator.bitwise.v"
        },
        {
          "match": "(?:(?:&&)|(?:\\|\\|)|!)",
          "name": "keyword.operator.logical.v"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.optional.v"
        }
      ]
    }
  }
}