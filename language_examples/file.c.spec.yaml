- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: pub
  scopes:
    - storage.modifier
- source: struct
  scopes:
    - keyword.struct
- source: ' File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tcfile "
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Using void* instead of FILE*'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: ':'
- source: "\tfd "
- source: int
  scopes:
    - storage.type.numeric
- source: pub
  scopesBegin:
    - storage.modifier
- source: mut
  scopesEnd:
    - storage.modifier
- source: ':'
- source: "\tis_opened "
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: struct
  scopes:
    - keyword.struct
- source: ' FileInfo '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tname "
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: "\tsize "
- source: int
  scopes:
    - storage.type.numeric
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getc
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' open_file can be used to open or create a file with custom flags and permissions and returns a `File` object.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' open_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' options '
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
- source: .
  scopesEnd:
    - punctuation.accessor
- source: int
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' flags'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: for
  scopes:
    - keyword.control
- source: ' m '
- source: in
  scopes:
    - keyword.control
- source: ' mode '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: match
  scopes:
    - keyword.control
- source: ' m '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t`w` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_create '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_trunc '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`a` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_create '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_append '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`r` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_rdonly '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`b` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_binary '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`s` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_sync '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`n` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_nonblock '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`c` "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_noctty '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t`"
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '` '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' flags'
- source: '|='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_rdwr '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''r'
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ''' '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tflags"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: o_rdwr
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''w'' '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tflags"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_wronly '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_create '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_trunc'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''a'' '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tflags"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'o_wronly '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_create '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_append'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' permission'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 0o666
  scopes:
    - constant.numeric.octal
- source: if
  scopes:
    - keyword.control
- source: ' options'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpermission"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: options
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' permission '
- source: <
  scopes:
    - keyword.operator.relation
- source: 0o600
  scopes:
    - constant.numeric.octal
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tpermission"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0x0100'
  scopes:
    - constant.numeric.hex
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tpermission"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0x0100'
  scopes:
    - constant.numeric.hex
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: '0x0080'
  scopes:
    - constant.numeric.hex
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' p'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tp"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfd"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: p
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' flags'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' permission'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' fd '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fdopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fd
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mode
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' isnil'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Failed to open '
- source: or
  scopes:
    - keyword.control
- source: ' create file "$path"'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcfile: cfile"
- source: "\t\tfd: fd"
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' open tries to open a file for reading and returns back a read-only `File` object.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' open'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: "\t$if linux {"
- source: "\t\t$if !android {"
- source: "\t\t\tfd := C.syscall(sys_open, path.str, 511)"
- source: "\t\t\tif fd == -1 {"
- source: "\t\t\t\treturn error('failed to open file \"$path\"')"
- source: "\t\t\t}"
- source: "\t\t\treturn File{"
- source: "\t\t\t\tfd: fd"
- source: "\t\t\t\tis_opened: true"
- source: "\t\t\t}"
- source: "\t\t}"
- source: "\t}"
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: "\tcfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''rb'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tfd"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fileno
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcfile: cfile"
- source: "\t\tfd: fd"
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' create creates or opens a file at a specified location and returns a write-only `File` object.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' create'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: android/termux/bionic is also a kind of linux,'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' but linux syscalls there sometimes fail,'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' while the libc version should work.'
  scopesEnd:
    - comment.line.double-slash
- source: "\t$if linux {"
- source: "\t\t$if !android {"
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: '$if macos {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: "\tfd = C.syscall(398, path.str, 0x601, 0x1b6)"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: '}'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: '$if linux {'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tfd = C.syscall(sys_creat, path.str, 511)"
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: '}'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tif fd == -1 {"
- source: "\t\t\t\treturn error('failed to create file \"$path\"')"
- source: "\t\t\t}"
- source: "\t\t\tfile = File{"
- source: "\t\t\t\tfd: fd"
- source: "\t\t\t\tis_opened: true"
- source: "\t\t\t}"
- source: "\t\t\treturn file"
- source: "\t\t}"
- source: "\t}"
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: "\tcfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''wb'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tfd"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fileno
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcfile: cfile"
- source: "\t\tfd: fd"
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' stdin - return an os.File for stdin, so that you can use .get_line on it too.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' stdin'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfd: "
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t\tcfile: C"
- source: .
  scopes:
    - punctuation.accessor
- source: stdin
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' stdout - return an os.File for stdout'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' stdout'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfd: "
- source: '1'
  scopes:
    - constant.numeric.integer
- source: "\t\tcfile: C"
- source: .
  scopes:
    - punctuation.accessor
- source: stdout
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' stderr - return an os.File for stderr'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' stderr'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' File'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfd: "
- source: '2'
  scopes:
    - constant.numeric.integer
- source: "\t\tcfile: C"
- source: .
  scopes:
    - punctuation.accessor
- source: stderr
- source: "\t\tis_opened: "
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read implements the Reader interface.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' **************************** Write ops  ***************************'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' write implements the Writer interface.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' It returns how many bytes were actually written.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: "\t$if linux {"
- source: "\t\t$if !android {"
- source: "\t\t\tres := C.syscall(sys_write, f.fd, s.str, s.len)"
- source: "\t\t\treturn res"
- source: "\t\t}"
- source: "\t}"
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: "\twritten"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' written '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s written'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' written'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' writeln writes the string `s` into the file, and appends a \n character.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' It returns how many bytes were written, including the \n character.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' writeln'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 's '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: "\t$if linux {"
- source: "\t\t$if !android {"
- source: "\t\t\tsnl := s + '\\n'"
- source: "\t\t\tC.syscall(sys_write, f.fd, snl.str, snl.len)"
- source: "\t\t\treturn"
- source: "\t\t}"
- source: "\t}"
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO perf'
  scopesEnd:
    - comment.line.double-slash
- source: "\twritten"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' s'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' written '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' s'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s written'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tx"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fputs
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c'\n'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' x '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''could not add newline'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' written '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_string writes the string `s` into the file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' It returns how many bytes were actually written.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 's '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: write_full_buffer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' usize'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' s'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_to implements the RandomWriter interface.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' It returns how many bytes were actually written.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' It resets the seek position to the end of the file.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_to'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s written'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s written'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s written'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Could not write to file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_ptr writes `size` bytes to the file, starting from the address in `data`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: write_ptr is unsafe and should be used carefully, since if you pass invalid'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' pointers to it, it will cause your programs to segfault.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: unsafe
  scopes:
    - keyword.control
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_ptr'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'data '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_full_buffer writes a whole buffer of data to the file, starting from the'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' address in `buffer`, no matter how many tries/partial writes it would take.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: unsafe
  scopes:
    - keyword.control
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_full_buffer'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'buffer '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buffer_len usize'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' buffer_len '
- source: <=
  scopes:
    - keyword.operator.relation
- source: ' usize'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' ptr'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buffer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' remaining_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buffer_len
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: for
  scopes:
    - keyword.control
- source: ' remaining_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tx"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' remaining_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tptr"
- source: +=
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: x
- source: "\t\t\tremaining_"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '-='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: x
- source: if
  scopes:
    - keyword.control
- source: ' x '
- source: <=
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'fwrite returned '
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_ptr_at writes `size` bytes to the file, starting from the address in `data`,'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' at byte offset `pos`, counting from the start of the file (pos 0).'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: write_ptr_at is unsafe and should be used carefully, since if you pass invalid'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' pointers to it, it will cause your programs to segfault.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: unsafe
  scopes:
    - keyword.control
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_ptr_at'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'data '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' **************************** Read ops  ***************************'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' fread wraps C.fread and handles error and end-of-file detection.'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' fread'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'ptr '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' item_size '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' items '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' stream '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' item_size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' items'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' stream'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' If no bytes were read, check for errors and end-of-file.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: <=
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' If fread encountered end-of-file return the none error. Note that fread'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' may read data and encounter the end-of-file, but we shouldn''t return none'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' in that case which is why we only check for end-of-file if no data was'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' read. The caller will get none on their next call because there will be'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' no data available and the end-of-file will be encountered again.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: feof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: stream
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: none
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' If fread encountered an error, return it. Note that fread and ferror do'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' not tell us what the error was, so we can''t return anything more specific'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' than there was an error. This is because fread and ferror do not set'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' errno.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ferror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: stream
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''file read error'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes reads bytes from the beginning of the file.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Utility method, same as .read_bytes_at(size, 0).'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'size '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_at
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: size
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes_at reads `size` bytes at the given position in the file.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_at
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'size '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' arr'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'len: size'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnread"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_into
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pos
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mut
  scopes:
    - storage.modifier
- source: ' arr'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' return err'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' arr'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: nread
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes_into_newline reads from the beginning of the file into the provided buffer.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Each consecutive call on the same file continues reading where it previously ended.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' A read call is either stopped, if the buffer is full, a newline was read or EOF.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_into_newline
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '@FN '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' '': `buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len` '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnewline"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '10'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' c'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' buf_ptr'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tstream"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: for
  scopes:
    - keyword.control
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'buf_ptr '
- source: <
  scopes:
    - keyword.operator.relation
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tc"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: getc
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: stream
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: match
  scopes:
    - keyword.control
- source: ' c '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: 'EOF '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: feof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: stream
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ferror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: stream
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''file read error'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tnewline "
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tbuf"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: buf_ptr
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tbuf"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: buf_ptr
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tbuf_ptr"
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: "\t\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes_into fills `buf` with bytes at the given position in the file.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' `buf` *must* have length greater than zero.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Returns the number of read bytes, or an error.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_into
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mut
  scopes:
    - storage.modifier
- source: ' buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '@FN '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' '': `buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len` '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Note: fseek errors if pos == os.file_size, which we accept'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: $if
  scopes:
    - keyword.control
- source: ' debug '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: $if
  scopes:
    - keyword.control
- source: ' debug '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: $if
  scopes:
    - keyword.control
- source: ' debug '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Could not read file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_from implements the RandomReader interface.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_from'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mut
  scopes:
    - storage.modifier
- source: ' buf '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: return
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Could not read file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_into_ptr reads at most max_size bytes from the file and writes it into ptr.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Returns the amount of bytes read or an error.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_into_ptr'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'ptr '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_size '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' fread'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' **************************** Utility  ops ***********************'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' flush writes any buffered unwritten data left in the file stream.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' flush'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fflush
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: struct
  scopes:
    - keyword.struct
- source: ' FileNotOpenedError '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tError"
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err FileNotOpenedError
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' ''os: file not opened'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: struct
  scopes:
    - keyword.struct
- source: ' SizeOfTypeIs'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: 'Error '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tError"
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err SizeOfTypeIs
- source: '0'
  scopes:
    - constant.numeric.integer
- source: Error
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' ''os: size of '
- source: type
  scopes:
    - keyword.type
- source: is
  scopes:
    - keyword.is
- source: '0'
  scopes:
    - entity.name.alias
- source: ''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' IError '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' IError'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: FileNotOpenedError
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' IError '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' IError'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: SizeOfTypeIs
- source: '0'
  scopes:
    - constant.numeric.integer
- source: Error
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_struct reads a single struct of type `T`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_struct'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' t T'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: t
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' read'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_struct_at reads a single struct of type `T` at position specified in file'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_struct_at'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' t T'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: t
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' read'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_raw reads and returns a single instance of type `T`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_raw'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'T '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' t'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: T
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' read'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' t'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_raw_at reads and returns a single instance of type `T` starting at file byte offset `pos`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' read_raw_at'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'T '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' t'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: T
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' read'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' t'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_struct writes a single struct of type `T`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_struct'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 't '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: T
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' write'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_struct_at writes a single struct of type `T` at position specified in file'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_struct_at'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 't '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: T
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' write'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO `write_raw[_at]` implementations are copy-pasted from `write_struct[_at]`'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_raw writes a single instance of type `T`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_raw'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 't '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: T
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' write'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_raw_at writes a single instance of type `T` starting at file byte offset `pos`'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' write_raw_at'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 't '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: T
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: T
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' tsize '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_size_of_type_'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_SET
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tn"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fwrite
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'errno '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' tsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''incomplete '
- source: struct
  scopes:
    - keyword.struct
- source: ' write'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' n'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: enum
  scopes:
    - keyword.enum
- source: ' SeekMode '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tstart"
- source: "\tcurrent"
- source: "\tend"
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' seek moves the file cursor (if any) associated with a file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' to a new location, offset `pos` bytes from the origin. The origin'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' is dependent on the `mode` and can be:'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: '   .start   -> the origin is the start of the file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: '   .current -> the current position/cursor in the file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: '   .end     -> the end of the file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If the file is not seek-able, or an error occures, the error will'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' be returned to the caller.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' A successful call to the fseek() function clears the end-of-file'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' indicator for the file.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f File'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' seek'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pos '
- source: i64
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode SeekMode'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\twhence"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _fseeki
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' whence'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fseeko
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' whence'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' whence'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' tell will return the current offset of the file cursor measured from'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' the start of the file, in bytes. It is complementary to seek, i.e.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' you can use the return value as the `pos` parameter to .seek( pos, .start ),'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' so that your next read will happen from the same place.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: File
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' tell'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: i64
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: 'is_opened '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_file_not_opened'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tpos"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ftell
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' pos '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' pos'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
