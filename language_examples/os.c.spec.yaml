- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: '#'
  scopesBegin:
    - markup.bold
- source: 'include <sys/stat.h> // #include <signal.h>'
- source: '#'
- source: include <errno.h>
  scopesEnd:
    - markup.bold
- source: pub
  scopesBegin:
    - storage.modifier
- source: const
  scopesEnd:
    - storage.modifier
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: "\targs"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: readdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: dirent
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: readlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'pathname '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' bufsiz usize'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getline
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ftell
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fp '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: i64
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: sigaction
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
- source: .
  scopesEnd:
    - punctuation.accessor
- source: int
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fdopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fd '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ferror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'stream '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: feof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'stream '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: CopyFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fn C.lstat(charptr, voidptr) u64'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wstat
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: u64
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: chown
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ftruncate
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _chsize_s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes returns all bytes read from file in `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' fp'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''rb'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fclose
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcseek"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' cseek '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''fseek failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ftell
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' fsize '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ftell failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tlen"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' On some systems C.ftell can return values in the 64-bit range'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that, when cast to `int`, can result in values below 0.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: len
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: <
  scopes:
    - keyword.operator.relation
- source: ' fsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''$fsize cast to '
- source: int
  scopes:
    - storage.type.numeric
- source: ' results '
- source: in
  scopes:
    - keyword.control
- source: ' $'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''')'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: rewind
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'len: len'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnr_read_elements"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: res
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' fp'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' nr_read_elements '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' fsize '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''fread failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tres"
- source: .
  scopes:
    - punctuation.accessor
- source: trim
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'nr_read_elements '
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ' len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_file reads the file in `path` and returns the contents.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' read_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tmode"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''rb'''
- source: mut
  scopes:
    - storage.modifier
- source: ' fp'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fclose
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcseek"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' cseek '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''fseek failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ftell
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' fsize '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ftell failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' C.fseek(fp, 0, SEEK_SET)  // same as `C.rewind(fp)` below'
  scopesEnd:
    - comment.line.double-slash
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: rewind
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tallocate"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' On some systems C.ftell can return values in the 64-bit range'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that, when cast to `int`, can result in values below 0.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: allocate
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: <
  scopes:
    - keyword.operator.relation
- source: ' fsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''$fsize cast to '
- source: int
  scopes:
    - storage.type.numeric
- source: ' results '
- source: in
  scopes:
    - keyword.control
- source: ' $'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''')'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' str'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: malloc_noscan
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'allocate '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tnelements"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: str
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' allocate'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' fp'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tis_eof"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: feof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tis_error"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ferror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' is_eof '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' is_error '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tfree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''fread failed'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tstr"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: nelements
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: if
  scopes:
    - keyword.control
- source: ' nelements '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' It is highly likely that the file was a virtual file from'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' /sys or /proc, with information generated on the fly, so'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' fsize was not reliably reported. Using vstring() here is'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' slower (it calls strlen internally), but will return more'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' consistent results.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' For example reading from /sys/class/sound/card0/id produces'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' a `PCH\n` string, but fsize is 4096, and otherwise you would'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' get a V string with .len = 4096 and .str = "PCH\n\\000".'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' str'
- source: .
  scopes:
    - punctuation.accessor
- source: v
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' str'
- source: .
  scopes:
    - punctuation.accessor
- source: v
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _with_len
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: nelements
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' ***************************** OS ops ************************'
- source: //
  scopesBegin:
    - punctuation.definition.comment.begin
- source: //
  scopesEnd:
    - punctuation.definition.comment.begin
- source: ' truncate changes the size of the file located in `path` to `len`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Note that changing symbolic links on Windows only works as admin.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' truncate'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len '
- source: u64
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' o_wronly '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' o_trunc'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' fp '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _chsize_s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: ftruncate
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' eprintln_unknown_file_size'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' Cannot determine file'
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: 'size: '' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' posix_get_error_msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' file_size returns the size of the file located in `path`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If an error occurs it returns 0.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Note that use of this on symbolic links on Windows returns always 0.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' file_size'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: u64
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' s'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' swin'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: __stat
- source: '64'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wstat
- source: '64'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: swin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\teprintln_unknown_file_size"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' swin'
- source: .
  scopes:
    - punctuation.accessor
- source: st_size
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\teprintln_unknown_file_size"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: u64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' x'
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' debug '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Using os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' on '
- source: '32'
  scopes:
    - constant.numeric.integer
- source: bit systems may not work on big files
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wstat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\teprintln_unknown_file_size"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: u64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\teprintln_unknown_file_size"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: u64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' mv moves files or folders from `src` to `dst`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' mv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'src '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' dst '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' rdst'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: dst
- source: if
  scopes:
    - keyword.control
- source: ' is_dir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rdst
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\trdst"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rdst
- source: .
  scopes:
    - punctuation.accessor
- source: trim_right
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path_separator
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' file_name'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: trim_right
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path_separator
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tw_src"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tw_dst"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: rdst
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _wrename
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: w_src
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' w_dst'
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to rename $src to $dst'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ret
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: rename
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rdst
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to rename $src to $dst'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ret
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' cp copies files or folders from `src` to `dst`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' cp'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'src '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' dst '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tw_src"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tw_dst"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: dst
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: CopyFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: w_src
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' w_dst'
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tresult"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetLastError
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to copy $src to $dst'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfp_from"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: O_RDONLY
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' fp_from '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Check if file opened'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''cp: failed to open $src'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tfp_to"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: dst
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'O_WRONLY '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'O_CREAT '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: O_TRUNC
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'S_IWUSR '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: S_IRUSR
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' fp_to '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Check if file opened (permissions problems ...)'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''cp '
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: permission
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ': failed to write to $dst '
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fp_to: $fp_to'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_to
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO use defer{} to close files in case of error or return.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Currently there is a C-Error when building.'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' buf'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1024'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' count'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: for
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tcount"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: read
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: buf
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' count '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: write
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_to
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: buf
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' count'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_to
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''cp: failed to write to $dst'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\t\tfrom_attr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: src
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: from_attr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: dst
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' from_attr'
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_to
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to set permissions '
- source: for
  scopes:
    - keyword.control
- source: ' $dst'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_to
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp_from
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' vfopen returns an opened C file, given its path and open mode.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: os.vfopen is useful for compatibility with C libraries, that expect `FILE *`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If you write pure V code, os.create or os.open are more convenient.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' vfopen'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: 'FILE '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' path'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''vfopen called with ""'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' fp'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfp"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _wfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode'
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfp"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mode
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' isnil'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to open file "$path"'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' fp'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fileno returns the file descriptor of an opened C file.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' fileno'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cfile '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _fileno
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' cfile_casted'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: FILE
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' FILE* cfile_casted = 0;'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tcfile_casted"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: cfile
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Required on FreeBSD/OpenBSD/NetBSD as stdio.h defines fileno(..) with a macro'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that performs a field access on its argument without casting from void*.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: fileno
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cfile_casted
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' vpopen system starts the specified command, waits for it to complete, and returns its code.'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' vpopen'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' *C.FILE {'
  scopesEnd:
    - comment.line.double-slash
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tmode"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''rb'''
- source: "\t\twpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wpopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode'
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: popen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' c''r'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' posix_wait'
- source: 4_
  scopes:
    - constant.numeric.integer
- source: to_exit_status
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'waitret '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' waitret'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' ret'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' is_signaled'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' (see man system, man 2 waitpid: C macro WEXITSTATUS section)'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: WIFEXITED
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: waitret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: WEXITSTATUS
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: waitret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tis_signaled"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: WIFSIGNALED
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: waitret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: WTERMSIG
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: waitret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tis_signaled"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' ret'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' is_signaled'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' posix_get_error_msg return error code representation in string.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' posix_get_error_msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'code '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tptr_text"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: strerror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: code
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' voidptr?'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' ptr_text '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' '''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopesBegin:
    - keyword.control
- source: unsafe
  scopesEnd:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos'
- source: '3'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ptr_text
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' vpclose will close a file pointer opened with `vpopen`.'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' vpclose'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _pclose
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tret"
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' _'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: posix_wait
- source: 4_
  scopes:
    - constant.numeric.integer
- source: to_exit_status
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: pclose
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' ret'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' system works like `exec`, but only returns a return code.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' system'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cmd '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' if cmd.contains('';'') || cmd.contains(''&&'') || cmd.contains(''||'') || cmd.contains(''\n'') {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO remove panic'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' panic('';, &&, || and \\n are not allowed in shell commands'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' ret'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' overcome bug in system & _wsystem (cmd) when first char is quote `"`'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\twcmd"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: if
  scopes:
    - keyword.control
- source: ' cmd'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' cmd'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' `"` '
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' cmd'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: ' `"` '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' ''"$cmd"'' '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' cmd '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _wsystem
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wcmd
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' ios '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\targ"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: c'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: bin
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: sh'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' c'''
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: c'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmd
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: "\t\t\t\tpid"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: posix_spawn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: pid
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' c'''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: bin
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: sh'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' arg'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tstatus"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: waitpid
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pid
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: status
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: WIFEXITED
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: status
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: WEXITSTATUS
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: status
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: system
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmd
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tprint_c_errno"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpret"
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' is_signaled'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: posix_wait
- source: 4_
  scopes:
    - constant.numeric.integer
- source: to_exit_status
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' is_signaled '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Terminated by signal $'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'ret:'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: d
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' sigint_to_signal_name'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pret
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' '''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tret"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: pret
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' ret'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' exists returns true if `path` (file or directory) exists.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' exists'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _waccess
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: p
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: access
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' f_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_executable returns `true` if `path` is executable.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_executable'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess?view=vs-2019'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' i.e. there is no X bit there, the modes can be:'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' 00 Existence only'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' 02 Write-only'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' 04 Read-only'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' 06 Read and write'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' exists'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: p
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: ends_with
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: exe'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' solaris '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tstatbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: statbuf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: statbuf
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 's_ixusr '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' s_ixgrp '
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: ' s_ixoth'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: access
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' x_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_writable returns `true` if `path` is writable.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_writable'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\twp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: p
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _waccess
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' w_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' &u16'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: access
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' w_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_readable returns `true` if `path` is readable.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_readable'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\twp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: p
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _waccess
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' r_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' &u16'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: access
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' r_ok'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' rm removes file in `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' rm'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' rc'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\trc"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _wremove
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\trc"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: remove
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' rc '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Failed to remove "$path": '' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' posix_get_error_msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' C.unlink(path.cstr())'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' rmdir removes a specified directory.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' rmdir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\trc"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: RemoveDirectory
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' rc '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-removedirectorya - 0 is failure'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Failed to remove "$path": '' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' posix_get_error_msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\trc"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' rc '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' print_c_errno will print the current value of `C.errno`.'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' print_c_errno'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\te"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: "\tse"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: strerror
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: e
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''errno'
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $e err
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $se'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' get_raw_line returns a one-line string from stdin along with ''\n'' if there is any.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' get_raw_line'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tmax_line_chars"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '256'
  scopes:
    - constant.numeric.integer
- source: "\t\t\tbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: malloc_noscan
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'max_line_chars '
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\th_input"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetStdHandle
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: STD_INPUT_HANDLE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' is_atty'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tx"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ReadConsole
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: h_input
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buf'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_line_chars '
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'x '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' tos'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: '2'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' offset'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: for
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tpos"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'buf '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' offset'
- source: "\t\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ReadFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: h_input
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: LPDWORD
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'res '
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' offset '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' tos'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'res '
- source: '|'
  scopesBegin:
    - keyword.operator.bitwise
- source: '|'
  scopesEnd:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's_read '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: 'pos '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' `\n` '
- source: '|'
  scopesBegin:
    - keyword.operator.bitwise
- source: '|'
  scopesEnd:
    - keyword.operator.bitwise
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: 'pos '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' `\r` '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\toffset"
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t\toffset"
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' buf'
- source: .
  scopes:
    - punctuation.accessor
- source: v
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _with_len
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: offset
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tmax"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: usize
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tnr_chars"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getline
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: max
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stdin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopesBegin:
    - keyword.control
- source: unsafe
  scopesEnd:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: if
  scopes:
    - keyword.control
- source: ' nr_chars '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' nr_chars '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' get_raw_stdin will get the raw input from stdin.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' get_raw_stdin'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tblock_"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '512'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' old_size'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: block_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: mut
  scopes:
    - storage.modifier
- source: ' buf'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: malloc_noscan
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: block_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\th_input"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetStdHandle
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: STD_INPUT_HANDLE
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' offset'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: for
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tpos"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'buf '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' offset'
- source: "\t\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ReadFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: h_input
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pos'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' block_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: LPDWORD
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\toffset"
- source: +=
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'res '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t\tnew_size"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'offset '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' block_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: block_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_read
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tbuf"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: realloc_data
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' old_size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' new_size'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\told_size"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: new_size
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' array'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\telement_size: "
- source: '1'
  scopes:
    - constant.numeric.integer
- source: "\t\t\t\tdata: "
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\t\tlen: offset"
- source: "\t\t\t\tcap: offset"
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tmax"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: usize
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tnr_chars"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getline
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: max
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stdin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' array'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\telement_size: "
- source: '1'
  scopes:
    - constant.numeric.integer
- source: "\t\t\tdata: "
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tlen: "
- source: if
  scopes:
    - keyword.control
- source: ' nr_chars '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' nr_chars '
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tcap: "
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: max
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_file_array reads an array of `T` values from file `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' read_file_array'
- source: <
  scopes:
    - keyword.operator.relation
- source: T
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: 'T '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\ta"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: T
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: sizeof
  scopes:
    - keyword.sizeof
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: a
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' prepare for reading, get current file size'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' fp'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''rb'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: T
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fseek
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: SEEK_END
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tfsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: ftell
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: rewind
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' read the actual data from the file'
  scopesEnd:
    - comment.line.double-slash
- source: "\tlen"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'fsize '
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ' tsize'
- source: "\tallocate"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' On some systems C.ftell can return values in the 64-bit range'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that, when cast to `int`, can result in values below 0.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: allocate
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: <
  scopes:
    - keyword.operator.relation
- source: ' fsize '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''$fsize cast to '
- source: int
  scopes:
    - storage.type.numeric
- source: ' results '
- source: in
  scopes:
    - keyword.control
- source: ' $'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsize
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''')'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tmalloc_noscan"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: allocate
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnread"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fread
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tsize'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' fp'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fclose
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopesBegin:
    - keyword.control
- source: unsafe
  scopesEnd:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tarray"
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\telement_size: tsize"
- source: "\t\t\tdata: buf"
- source: "\t\t\tlen: "
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: nread
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\t\tcap: "
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: len
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' on_segfault'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'f '
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' macos '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: printf
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c'TODO'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: "\t\tmut sa := C.sigaction{}"
- source: "\t\tC.memset(&sa, 0, sizeof(C.sigaction_size))"
- source: "\t\tC.sigemptyset(&sa.sa_mask)"
- source: "\t\tsa.sa_sigaction = f"
- source: "\t\tsa.sa_flags = C.SA_SIGINFO"
- source: "\t\tC.sigaction(C.SIGSEGV, &sa, 0)"
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' executable returns the path name of the executable that started the current'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' process.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' executable'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: max_path_bufffer_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' result'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' vcalloc_noscan'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpu"
- source: 16_
  scopes:
    - constant.numeric.integer
- source: result
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tlen"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetModuleFileName
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pu'
- source: 16_
  scopes:
    - constant.numeric.integer
- source: result
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '512'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' determine if the file is a windows symlink'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tattrs"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFileAttributesW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pu
- source: 16_
  scopes:
    - constant.numeric.integer
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tis_set"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'attrs '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '0x400'
  scopes:
    - constant.numeric.hex
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' FILE_ATTRIBUTE_REPARSE_POINT'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' is_set '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' it''s a windows symlink'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' gets handle with GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: CreateFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pu
- source: 16_
  scopes:
    - constant.numeric.integer
- source: result
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0x80000000'
  scopes:
    - constant.numeric.hex
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0x80'
  scopes:
    - constant.numeric.hex
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' file '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: CloseHandle
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t\tfinal_path"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' vcalloc_noscan'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: final_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\t\tfinal_len"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFinalPathNameByHandleW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: final_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t\t\t\tsize"
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' final_len '
- source: <
  scopes:
    - keyword.operator.relation
- source: ' size '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\tsret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: '2'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: final_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' final_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' sret'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' remove ''\\?\'' from beginning (see link above)'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\t\t\tsret_slice"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: sret
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '4'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: "\t\t\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: sret_slice
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' saw that the executable file path was too long'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: '2'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pu
- source: 16_
  scopes:
    - constant.numeric.integer
- source: result
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' macos '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpid"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: getpid
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: proc_pidpath
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pid
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' result'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: <=
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' failed at calling proc_pidpath with pid: $pid '
- source: .
  scopes:
    - punctuation.accessor
- source: ' proc_pidpath returned $ret '''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' executable_fallback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' freebsd '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tbufsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: usize
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tmib"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: ' CTL_KERN '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '14'
  scopes:
    - constant.numeric.integer
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: ' KERN_PROC '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '12'
  scopes:
    - constant.numeric.integer
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: ' KERN_PROC_PATHNAME '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: sysctl
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mib
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mib'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' result'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: bufsize
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' netbsd '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcount"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: readlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: curproc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: exe'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' count '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' failed at reading '
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: curproc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: exe to get exe path'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' executable_fallback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' dragonfly '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcount"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: readlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: curproc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: file'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' count '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' failed at reading '
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: curproc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: file to get exe path'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' executable_fallback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' linux '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcount"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: readlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: self
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: exe'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' count '
- source: <
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' failed at reading '
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: proc
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: self
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: exe to get exe path'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' executable_fallback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: result
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' "Sadly there is no way to get the full path of the executed file in OpenBSD."'
  scopesEnd:
    - comment.line.double-slash
- source: $if
  scopes:
    - keyword.control
- source: ' openbsd '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' solaris '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' haiku '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' executable_fallback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_dir returns a `bool` indicating whether the given `path` is a directory.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_dir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tw_path"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tattr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFileAttributesW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: w_path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' attr '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: INVALID_FILE_ATTRIBUTES
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: attr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: 'FILE_ATTRIBUTE_DIRECTORY '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tstatbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopesBegin:
    - keyword.control
- source: unsafe
  scopesEnd:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: statbuf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' ref: https://code.woboq.org/gcc/include/sys/stat.h.html'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tval"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: statbuf
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ' s_ifmt'
- source: return
  scopes:
    - keyword.control
- source: ' val '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' s_ifdir'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_link returns a boolean indicating whether `path` is a link.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_link'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpath_"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tattr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFileAttributesW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path_
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: attr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: INVALID_FILE_ATTRIBUTES
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'attr '
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '0x400'
  scopes:
    - constant.numeric.hex
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tstatbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: lstat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: statbuf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: statbuf
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ' s_ifmt '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' s_iflnk'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' chdir changes the current working directory to the new directory in `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chdir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wchdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: chdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' max_path_bufffer_size'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' size'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: max_path_len
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tsize"
- source: '*='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' size'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' getwd returns the absolute path of the current directory.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' getwd'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tbuf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: vcalloc_noscan
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: max_path_bufffer_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tfree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _wgetcwd
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' '''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getcwd
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' '''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: tos_clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buf
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' real_path returns the full absolute path for fpath, with all relative ../../, symlinks and so on resolved.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' See http://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Also https://insanecoding.blogspot.com/2007/11/pathmax-simply-isnt.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' and https://insanecoding.blogspot.com/2007/11/implementing-realpath-in-c.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: this particular rabbit hole is *deep* ...'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' real_path'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tsize"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: max_path_bufffer_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' fullpath'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' vcalloc_noscan'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: size
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fullpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpu"
- source: 16_
  scopes:
    - constant.numeric.integer
- source: fullpath
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fullpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' gets handle with GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' use C.CreateFile(fpath.to_wide(), 0x80000000, 1, 0, 3, 0x80, 0) instead of  get_file_handle'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' try to open the file to get symbolic link path'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tfpath_wide"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: fpath
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' free'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath_wide
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\t\tfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: CreateFile
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath_wide
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0x80000000'
  scopes:
    - constant.numeric.hex
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0x80'
  scopes:
    - constant.numeric.hex
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' file '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: CloseHandle
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tfinal_len"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFinalPathNameByHandleW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pu'
- source: 16_
  scopes:
    - constant.numeric.integer
- source: fullpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' size'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' final_len '
- source: <
  scopes:
    - keyword.operator.relation
- source: ' size '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\trt"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: '2'
  scopes:
    - constant.numeric.integer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pu
- source: 16_
  scopes:
    - constant.numeric.integer
- source: fullpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' final_len'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t\tsrt"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: rt
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '4'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: srt
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' saw that the file path was too long'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' fpath'
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' if it is not a file C.CreateFile doesn''t gets a file handle, use GetFullPath instead'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\t\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetFullPathName
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath_wide
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' max_path_len'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' pu'
- source: 16_
  scopes:
    - constant.numeric.integer
- source: fullpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO: check errors if path len is not enough'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' fpath'
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pu
- source: 16_
  scopes:
    - constant.numeric.integer
- source: fullpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tret"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: realpath
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fullpath
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' ret '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' fpath'
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: fullpath is much larger (usually ~4KB), than what C.realpath will'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' actually fill in the vast majority of the cases => it pays to copy the'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' resulting string from that buffer, to a shorter one, and then free the'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' 4KB fullpath buffer.'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' res'
- source: .
  scopes:
    - punctuation.accessor
- source: free
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' tos_clone'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fullpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' normalize_drive_letter'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: res
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: 'direct_array_access; manualfree; '
- source: unsafe
  scopes:
    - keyword.control
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: fn
  scopes:
    - keyword.fn
- source: ' normalize_drive_letter'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' normalize_drive_letter is needed, because'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' a path like c:\nv\.bin (note the small `c`) in %PATH,'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' is NOT recognized by cmd.exe (and probably other programs too)...'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Capital drive letters do work fine.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' path'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '2'
  scopes:
    - constant.numeric.integer
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' path'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '>='
  scopes:
    - keyword.operator.relation
- source: ' `a` '
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' path'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: <=
  scopes:
    - keyword.operator.relation
- source: ' `z` '
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' path'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' `:`'
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' path'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' path_separator'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tx"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: x
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: 'x '
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '32'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fork will fork the current system process and return the pid of the fork.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' fork'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' pid'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpid"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: fork
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: 'fork not supported '
- source: in
  scopes:
    - keyword.control
- source: ' windows'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' pid'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' wait blocks the calling process until one of its child processes exits or a signal is received.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' After child process terminates, parent continues its execution after wait system call instruction.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' wait'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' pid'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpid"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: wait
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: 'wait not supported '
- source: in
  scopes:
    - keyword.control
- source: ' windows'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' pid'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' file_last_mod_unix returns the "last modified" time stamp of file in `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' file_last_mod_unix'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: i64
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tattr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' # struct stat attr;'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: attr
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' # stat(path.str, &attr);'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: i64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: attr
- source: .
  scopes:
    - punctuation.accessor
- source: st_mtime
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' # return attr.st_mtime ;'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' flush will flush the stdout buffer.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' flush'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: fflush
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stdout
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' chmod change file access attributes of `path` to `mode`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Octals like `0o600` can be used.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chmod'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''chmod failed: '' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' posix_get_error_msg'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' chown changes the owner and group attributes of `path` to `owner` and `group`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chown'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' owner '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' group '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: chown
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' not implemented '
- source: for
  scopes:
    - keyword.control
- source: ' Windows'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: chown
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' owner'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' group'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' open_append opens `path` file for appending.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' open_append'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: 'File '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' file'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: File
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\twpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tmode"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''ab'''
- source: "\t\tfile"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: File
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tcfile: C"
- source: .
  scopes:
    - punctuation.accessor
- source: _wfopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: wpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode'
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: path
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: "\t\tfile"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: File
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tcfile: C"
- source: .
  scopes:
    - punctuation.accessor
- source: fopen
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' c''ab'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' isnil'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: .
  scopes:
    - punctuation.accessor
- source: cfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to create'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: append
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' file "$path"'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile"
- source: .
  scopes:
    - punctuation.accessor
- source: is_opened
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language
- source: return
  scopes:
    - keyword.control
- source: ' file'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' execvp - loads and executes a new child process, *in place* of the current process.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' The child process executable is located in `cmdpath`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' The arguments, that will be passed to it are in `args`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: this function will NOT return when successfull, since'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' the child process will take control over execution.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' execvp'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cmdpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cmdargs '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' cargs'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcargs "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ' cmdargs'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcargs "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdargs
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcargs "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _execvp
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cargs'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: execvp
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cargs'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' just in case C._execvp returned ... that happens on windows ...'
  scopesEnd:
    - comment.line.double-slash
- source: "\texit"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: res
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' execve - loads and executes a new child process, *in place* of the current process.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' The child process executable is located in `cmdpath`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' The arguments, that will be passed to it are in `args`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' You can pass environment variables to through `envs`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: this function will NOT return when successfull, since'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' the child process will take control over execution.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' execve'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cmdpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cmdargs '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' envs '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' cargv'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' cenvs'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcargv "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ' cmdargs'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcargv "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdargs
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ' envs'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcenvs "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: envs
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcargv "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tcenvs "
- source: '<<'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _execve
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cargv'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cenvs'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: execve
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: cmdpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cargv'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' cenvs'
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: normally execve does not return at all.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If it returns, then something went wrong...'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: ' res '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' is_atty returns 1 if the `fd` file descriptor is open and refers to a terminal'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_atty'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fd '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' mode'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tosfh"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _get_osfhandle
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fd
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: GetConsoleMode
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: osfh
- source: ','
  scopes:
    - punctuation.separator.comma
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: mode
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: isatty
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fd
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' write_file_array writes the data in `buffer` to a file in `path`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' write_file_array'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buffer array'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' f'
- source: .
  scopes:
    - punctuation.accessor
- source: write_full_buffer
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buffer
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' usize'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buffer
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ' buffer'
- source: .
  scopes:
    - punctuation.accessor
- source: element_size
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' glob'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'patterns '
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
- source: .
  scopesEnd:
    - punctuation.accessor
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' matches'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' pattern '
- source: in
  scopes:
    - keyword.control
- source: ' patterns '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tnative_glob_pattern"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: pattern
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mut
  scopes:
    - storage.modifier
- source: ' matches'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tmatches"
- source: .
  scopes:
    - punctuation.accessor
- source: sort
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' matches'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' last_error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' IError '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcode"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetLastError
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\t\tmsg"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: code
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: msg
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' code'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcode"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: errno
- source: "\t\tmsg"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: posix_get_error_msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: code
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' error_with_code'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: msg
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' code'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
