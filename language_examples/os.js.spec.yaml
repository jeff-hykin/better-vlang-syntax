- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: var $fs = require('fs');
- source: "\t#"
- source: var $path = require('path');
- source: "\t#"
- source: var tty = require('tty')
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopesBegin:
    - storage.modifier
- source: const
  scopesEnd:
    - storage.modifier
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: "\tpath_delimiter"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: get_path_delimiter
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tpath_separator"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: get_path_separator
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\targs"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: fn
  scopes:
    - keyword.fn
- source: ' get_path_delimiter'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tdelimiter"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''':'''
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: delimiter.str = $path.delimiter
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' delimiter'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' get_path_separator'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tseparator"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: separator.str = $path.sep
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' separator'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' init'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: >-
    $process.argv.forEach(function(val,index) { os__args.arr[index] = new
    string(val); })
  scopesEnd:
    - markup.bold
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' real_path returns the full absolute path for fpath, with all relative ../../, symlinks and so on resolved.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' See http://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Also https://insanecoding.blogspot.com/2007/11/pathmax-simply-isnt.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' and https://insanecoding.blogspot.com/2007/11/implementing-realpath-in-c.html'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: this particular rabbit hole is *deep* ...'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' real_path'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: res = new string( $fs.realpathSync(fpath))
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' fpath'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' flush will flush the stdout buffer.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' flush'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: $process.stdout.write('')
  scopesEnd:
    - markup.bold
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' getpid'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: res.val = $process.pid
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' chmod change file access attributes of `path` to `mode`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Octals like `0o600` can be used.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chmod'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' mode '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: 'try {'
- source: "\t\t#"
- source: '$fs.chmodSync(''''+path,mode.valueOf())'
- source: "\t\t#"
- source: '} catch (error) {'
- source: "\t\t#"
- source: >-
    return error_with_code(new string("chmod failed: " + error.message),new
    int(error.code))
- source: "\t\t#"
- source: '}'
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: is
  scopes:
    - keyword.is
- source: available
  scopes:
    - entity.name.alias
- source: ' only '
- source: for
  scopes:
    - keyword.control
- source: ' NodeJS'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' chown changes the owner and group attributes of `path` to `owner` and `group`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Octals like `0o600` can be used.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chown'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' owner '
- source: int
  scopes:
    - storage.type.numeric
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' group '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: 'try {'
- source: "\t\t#"
- source: '$fs.chownSync(''''+path,owner.valueOf(),group.valueOf())'
- source: "\t\t#"
- source: >-
    } catch (error) { return error_with_code(new string("chown failed: " +
    error.message),new int(error.code)) }
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' error'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'
- source: .
  scopes:
    - punctuation.accessor
- source: chown
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: is
  scopes:
    - keyword.is
- source: available
  scopes:
    - entity.name.alias
- source: ' only '
- source: for
  scopes:
    - keyword.control
- source: ' NodeJS'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' temp_dir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: res = new string($os.tmpdir())
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' home_dir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: res = new string($os.homedir())
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' join_path returns a path as string from input string parameter(s).'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' join_path'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'base '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' dirs '
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
- source: .
  scopesEnd:
    - punctuation.accessor
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' result'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tresult "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' base'
- source: .
  scopes:
    - punctuation.accessor
- source: trim_right
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''\\'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: for
  scopes:
    - keyword.control
- source: ' d '
- source: in
  scopes:
    - keyword.control
- source: ' dirs '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tresult "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' d'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' path_sep'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: path_sep = $path.sep;
  scopesEnd:
    - markup.bold
- source: "\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: result
- source: .
  scopes:
    - punctuation.accessor
- source: join
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path_sep
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' join_path_single'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'base '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' elem '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO: deprecate this'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' join_path'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: base
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' elem'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' execute'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cmd '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' Result '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' exit_code'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: mut
  scopes:
    - storage.modifier
- source: ' stdout'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: let commands = cmd.str.split(' ');
- source: "\t#"
- source: >-
    let output =
    $child_process.spawnSync(commands[0],commands.slice(1,commands.length));
- source: "\t#"
- source: exit_code = new int(output.status)
- source: "\t#"
- source: stdout = new string(output.stdout + '')
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' Result'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\texit_code: exit_code"
- source: "\t\toutput: stdout"
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' system'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cmd '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\texit_code"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: let commands = cmd.str.split(' ');
- source: "\t#"
- source: >-
    exit_code.val =
    $child_process.execSync(commands[0],commands.slice(1,commands.length));
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' exit_code'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' is_atty'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fd '
- source: int
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tres"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: res.val = +tty.isatty(fd.val)
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' glob'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'patterns '
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
- source: .
  scopesEnd:
    - punctuation.accessor
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''not yet implemented'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: none
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' write_file_array'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' buffer array'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: write_array
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: buffer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' chdir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 's '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: >-
    try { $process.chdir(s.str); } catch (e) { return error(new string('' + s))
    }
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' file_last_mod_unix'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'path '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tmtime"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: mtime.val = Math.floor($fs.lstatSync(path.str).mtime.getTime() / 1000)
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' mtime'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
