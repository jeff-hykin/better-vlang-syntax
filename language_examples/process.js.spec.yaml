- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: $if
  scopes:
    - keyword.control
- source: ' js_node '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: const $child_process = require('child_process')
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' new_process - create a new process descriptor'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: new does NOT start the new process.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' That is done because you may want to customize it first,'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' by calling different set_ methods on it.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' In order to start it, call p.run() or p.wait()'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' new_process'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'filename '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 'Process '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: Process
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfilename: filename"
- source: "\t\tstdio_fd: "
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '!'
  scopes:
    - keyword.operator.logical
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' spawn_internal'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid = $child_process.spawn(
- source: "\t#"
- source: 'p.val.filename+'''','
- source: "\t#"
- source: 'p.val.args.arr.map((x) => x.valueOf() + ''''),'
- source: "\t#"
- source: '{'
- source: "\t#"
- source: 'env: (p.val.env_is_custom ? p.val.env : $process.env),'
- source: "\t#"
- source: '})'
- source: "\t#"
- source: >-
    p.val.pid.on('error', function (err) { builtin.panic('Failed to start
    subprocess') })
  scopesEnd:
    - markup.bold
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: status
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: .
  scopes:
    - punctuation.accessor
- source: running
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'use_stdio_ctl '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.stdout.pipe(process.stdout)
- source: "\t\t#"
- source: p.val.pid.stdin.pipe(process.stdin)
- source: "\t\t#"
- source: p.val.pid.stderr.pipe(process.stderr)
  scopesEnd:
    - markup.bold
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' run'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: .
  scopes:
    - punctuation.accessor
- source: 'not_started '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: spawn_internal
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' signal_kill'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '!'
  scopes:
    - keyword.operator.logical
- source: in
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: .
  scopes:
    - punctuation.accessor
- source: running
- source: ','
  scopes:
    - punctuation.separator.comma
- source: .
  scopes:
    - punctuation.accessor
- source: stopped
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.kill('SIGKILL');
  scopesEnd:
    - markup.bold
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: status
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: .
  scopes:
    - punctuation.accessor
- source: aborted
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' signal_stop'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '!'
  scopes:
    - keyword.operator.logical
- source: in
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: .
  scopes:
    - punctuation.accessor
- source: running
- source: ','
  scopes:
    - punctuation.separator.comma
- source: .
  scopes:
    - punctuation.accessor
- source: stopped
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.kill('SIGSTOP');
  scopesEnd:
    - markup.bold
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: status
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: .
  scopes:
    - punctuation.accessor
- source: aborted
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' signal_continue'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: .
  scopes:
    - punctuation.accessor
- source: 'stopped '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.kill('SIGCONT');
  scopesEnd:
    - markup.bold
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: status
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: .
  scopes:
    - punctuation.accessor
- source: running
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' wait'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: .
  scopes:
    - punctuation.accessor
- source: 'not_started '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: spawn_internal
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '!'
  scopes:
    - keyword.operator.logical
- source: in
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: .
  scopes:
    - punctuation.accessor
- source: running
- source: ','
  scopes:
    - punctuation.separator.comma
- source: .
  scopes:
    - punctuation.accessor
- source: stopped
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: wait_internal
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' wait_internal'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: 'p.val.pid.on(''exit'', function (code) { console.log(code) })'
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' set_redirect_stdio'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: use_stdio_ctl
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' stdin_write'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 's '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: check_redirection_call
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''stdin_write'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.stdin.write(s)
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' stdin_resume'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: p.val.pid.stdin.resume()
  scopesEnd:
    - markup.bold
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' todo(playX): probably does not work'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' will read from stdout pipe, will only return when EOF (end of file) or data'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' means this will block unless there is data'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' stdout_slurp'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tp"
- source: .
  scopes:
    - punctuation.accessor
- source: check_redirection_call
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''stdout_slurp'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: "\t#"
  scopesBegin:
    - markup.bold
- source: 'p.val.pid.stdout.on(''data'', function (data) { res = new string(data) })'
  scopesEnd:
    - markup.bold
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' _check_redirection_call - should be called just by stdxxx methods'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' check_redirection_call'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fn_name '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: p
- source: .
  scopes:
    - punctuation.accessor
- source: 'use_stdio_ctl '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Call p'
- source: .
  scopes:
    - punctuation.accessor
- source: set_redirect_stdio
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' before calling p'
- source: .
  scopes:
    - punctuation.accessor
- source: $fn_name'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' p'
- source: .
  scopes:
    - punctuation.accessor
- source: 'status '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: .
  scopes:
    - punctuation.accessor
- source: 'not_started '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpanic"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''Call p'
- source: .
  scopes:
    - punctuation.accessor
- source: $
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: fn_name
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' after you have called p'
- source: .
  scopes:
    - punctuation.accessor
- source: run
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' p Process'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ' close'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' no-op on JS backend'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
