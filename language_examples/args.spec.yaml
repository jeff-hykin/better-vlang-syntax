- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Copyright (c) 2019-2022 Alexander Medvednikov. All rights reserved.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Use of this source code is governed by an MIT license'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that can be found in the LICENSE file.'
  scopesEnd:
    - comment.line.double-slash
- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' args_after returns all os.args, located *after* a specified `cut_word`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' When `cut_word` is NOT found, os.args is returned unmodified.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' args_after'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cut_word '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' args'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' cargs'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' cut_word '
- source: '!'
  scopes:
    - keyword.operator.logical
- source: in
  scopes:
    - keyword.control
- source: ' args '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcargs"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: args
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' found'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language
- source: "\t\tcargs "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' args'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: for
  scopes:
    - keyword.control
- source: ' a '
- source: in
  scopes:
    - keyword.control
- source: ' args'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' a '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' cut_word '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tfound"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language
- source: continue
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'found '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: continue
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tcargs "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' a'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' cargs'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' args_before returns all os.args, located *before* a specified `cut_word`.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' When `cut_word` is NOT found, os.args is returned unmodified.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' args_before'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'cut_word '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' args'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' cargs'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' cut_word '
- source: '!'
  scopes:
    - keyword.operator.logical
- source: in
  scopes:
    - keyword.control
- source: ' args '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcargs"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: args
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcargs "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' args'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: for
  scopes:
    - keyword.control
- source: ' a '
- source: in
  scopes:
    - keyword.control
- source: ' args'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' a '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' cut_word '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\tcargs "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' a'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' cargs'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
