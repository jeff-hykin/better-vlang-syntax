- source: import
  scopesBegin:
    - meta.import
  scopes:
    - keyword.import
- source: os
  scopes:
    - entity.name.import
- source: import
  scopes:
    - keyword.import
- source: time
  scopes:
    - entity.name.import
  scopesEnd:
    - meta.import
- source: const
  scopes:
    - storage.modifier
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' tfolder will contain all the temporary files/subfolders made by'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' the different tests. It would be removed in testsuite_end(), so'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' individual os tests do not need to clean up after themselves.'
  scopesEnd:
    - comment.line.double-slash
- source: "\ttfolder"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: temp_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''v'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''tests'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''os_test'''
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' os.args has to be *already initialized* with the program''s argc/argv at this point'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' thus it can be used for other consts too:'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopes:
    - storage.modifier
- source: ' args_at_start'
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: args
- source: .
  scopes:
    - punctuation.accessor
- source: clone
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: fn
  scopes:
    - keyword.fn
- source: ' testsuite_begin'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''testsuite_begin'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfolder'
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: $tfolder'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''args_at_start: $args_at_start'')'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' args_at_start'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' args_at_start '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: args
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' testsuite_end'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: wd_at_startup
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln(''testsuite_end  , tfolder = $tfolder removed.'')'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_open_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: open_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''r'
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o666
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' err'
- source: .
  scopes:
    - punctuation.accessor
- source: msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''No such file '
- source: or
  scopes:
    - keyword.control
- source: ' directory'''
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: File
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' file'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: open_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''w'
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o666
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile"
- source: .
  scopes:
    - punctuation.accessor
- source: write_
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: hello
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tread_hello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''error reading file $filename'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' read_hello'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_open_file_binary'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: dat'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello \n world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: open_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''r'
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o666
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' err'
- source: .
  scopes:
    - punctuation.accessor
- source: msg
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''No such file '
- source: or
  scopes:
    - keyword.control
- source: ' directory'''
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: File
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' file'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: open_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''wb'
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o666
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: hello
- source: .
  scopes:
    - punctuation.accessor
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' file'
- source: .
  scopes:
    - punctuation.accessor
- source: write_ptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tread_hello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''error reading file $filename'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' read_hello'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fn test_file_get_line() {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tfilename := './fgetline.txt'"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tos.write_file(filename, 'line 1\\nline 2')"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tmut f := os.open_file(filename, 'r', 0) or {"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t\tassert false"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t\treturn"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t}"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tline1 := f.get_line() or {"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t\t''"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t}"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tline2 := f.get_line() or {"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t\t''"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t}"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tf.close()"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \t//"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \teprintln('line1: $line1 $line1.bytes()')"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \teprintln('line2: $line2 $line2.bytes()')"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tassert line1 == 'line 1\\n'"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: " \tassert line2 == 'line 2'"
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' create_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' create_and_write_to_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'fpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' content '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: write_
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: content
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_create_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: "\tcreate_and_write_to_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' hello'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: assert
  scopes:
    - keyword.assert
- source: ' hello'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_is_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Setup'
  scopesEnd:
    - comment.line.double-slash
- source: "\twork_dir"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: getwd
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''is_file_test'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''tmp_file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Test things that shouldn''t be a file'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''non'
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: existent_file
- source: .
  scopes:
    - punctuation.accessor
- source: tmp'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Test file'
  scopesEnd:
    - comment.line.double-slash
- source: "\ttfile_content"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''temporary file'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfile_content'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Test dir symlinks'
  scopesEnd:
    - comment.line.double-slash
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tdsymlink"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir_symlink'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' dsymlink'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: dsymlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Test file symlinks'
  scopesEnd:
    - comment.line.double-slash
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfsymlink"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file_symlink'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' fsymlink'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fsymlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_write_and_read_'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _to_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' hello'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tread_hello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''error reading file $filename'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' read_hello'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' test_write_and_read_bytes checks for regressions made in the functions'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes, read_bytes_at and write_bytes.'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' test_write_and_read_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfile_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: _reader_writer
- source: .
  scopes:
    - punctuation.accessor
- source: tst'
- source: "\tpayload"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '`I`'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' `D`'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' `D`'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' `Q`'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' `D`'
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: mut
  scopes:
    - storage.modifier
- source: ' file_write'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to create file $file_name'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' We use the standard write_bytes function to write the payload and'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' compare the length of the array with the file size (have to match).'
  scopesEnd:
    - comment.line.double-slash
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' file_write'
- source: .
  scopes:
    - punctuation.accessor
- source: write_ptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: payload
- source: .
  scopes:
    - punctuation.accessor
- source: data
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '5'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile_write"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' payload'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' file_read'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: open
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''failed to open file $file_name'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' We only need to test read_bytes because this function calls'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' read_bytes_at with second parameter zeroed (size, 0).'
  scopesEnd:
    - comment.line.double-slash
- source: "\tr"
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: file_read
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '5'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln(''rbytes: $rbytes'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln(''payload: $payload'')'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' r'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: 's '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' payload'
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' check that trying to read data from EOF doesn''t error and returns 0'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' a'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'len: '
- source: '5'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnread"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: file_read
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s_into
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '5'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mut
  scopes:
    - storage.modifier
- source: ' a'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tn"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: if
  scopes:
    - keyword.control
- source: ' err'
- source: is
  scopes:
    - keyword.is
- source: none
  scopes:
    - entity.name.alias
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tn"
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' nread '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tfile_read"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' We finally delete the test file.'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_ls'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' x'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: ls
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' x'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: ls
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' x'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' create_tree'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: c
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: d
- source: .
  scopes:
    - punctuation.accessor
- source: md'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: another
- source: .
  scopes:
    - punctuation.accessor
- source: md'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: x
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: 'y'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: z
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: xyz
- source: .
  scopes:
    - punctuation.accessor
- source: ini'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' remove_tree'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' normalise_paths'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'paths '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: paths
- source: .
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - keyword.map
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: it
  scopes:
    - keyword.control
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: path_separator
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: "\tres"
- source: .
  scopes:
    - punctuation.accessor
- source: sort
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_walk_ext'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tcreate_tree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tremove_tree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tall"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: walk_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' all'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '10'
  scopes:
    - constant.numeric.integer
- source: "\ttop"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: normalise_paths
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: walk_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' top '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: x
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: 'y'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: z
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: c
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: "\tsubfolder_txts"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: normalise_paths
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: walk_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' subfolder_txts '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: x
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: 'y'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'myfolder"
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: z
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: mut
  scopes:
    - storage.modifier
- source: ' mds'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: normalise_paths
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: walk_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: md'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' mds '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: another
- source: .
  scopes:
    - punctuation.accessor
- source: md'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: d
- source: .
  scopes:
    - punctuation.accessor
- source: md'
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_walk_with_context'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tcreate_tree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tremove_tree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: walk_with_context
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''myfolder'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: res
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fn
  scopes:
    - keyword.fn
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res '
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' fpath '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tres "
- source: '<<'
  scopes:
    - keyword.operator.bitwise
- source: ' fpath'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tres"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: normalise_paths
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: res
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' ''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '1'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: f
- source: '3'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b
- source: .
  scopes:
    - punctuation.accessor
- source: 'txt'' '
- source: in
  scopes:
    - keyword.control
- source: ' res'
- source: assert
  scopes:
    - keyword.assert
- source: ' ''myfolder'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: another
- source: .
  scopes:
    - punctuation.accessor
- source: 'md'' '
- source: in
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_create_and_delete_folder'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfolder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tfolder_contents"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: ls
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' folder_contents'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfolder_exists"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' folder_exists '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' walk_callback'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'file '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' file '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: ''' '
- source: '|'
  scopesBegin:
    - keyword.operator.bitwise
- source: '|'
  scopesEnd:
    - keyword.operator.bitwise
- source: ' file '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''' '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' file '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''test_walk'' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: 'path_separator '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' ''test'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_walk'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfolder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''test_walk'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfile"
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'folder '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: 'path_separator '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' ''test'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''test'
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: walk
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' walk_callback'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_cp'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\told_file_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''cp_example'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\tnew_file_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''cp_new_example'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: old_file_name
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''Test data '
- source: '1'
  scopesBegin:
    - constant.numeric.integer
- source: '2'
- source: '3'
  scopesEnd:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' V'
- source: is
  scopes:
    - keyword.is
- source: awesome
  scopes:
    - entity.name.alias
- source: ' #$'
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: ^
  scopes:
    - keyword.operator.bitwise
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '!'
  scopes:
    - keyword.operator.logical
- source: '~'
  scopes:
    - keyword.operator.bitwise
- source: ⭐'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: old_file_name
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' new_file_name'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''$err'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\told_file"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: old_file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnew_file"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: new_file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' old_file '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' new_file'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: old_file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: new_file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_mv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\twork_dir"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: getwd
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''mv_test'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Setup test files'
  scopesEnd:
    - comment.line.double-slash
- source: "\ttfile"
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttfile"
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'
- source: .
  scopes:
    - punctuation.accessor
- source: test'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttfile"
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'
- source: .
  scopes:
    - punctuation.accessor
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttfile_content"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''temporary file'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfile_content'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfile_content'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Setup test dirs'
  scopesEnd:
    - comment.line.double-slash
- source: "\ttdir"
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttdir"
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttdir"
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: work_dir
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'
- source: '3'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Move file with no extension to dir'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tdir'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' expected'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Move dir with contents to other dir'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tdir'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\texpected"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\texpected"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Move dir with contents to other dir (by renaming)'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''dir'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tdir'
- source: '3'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\texpected"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: tdir
- source: '3'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir_empty
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Move file with extension to dir'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tdir'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\texpected"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'
- source: .
  scopes:
    - punctuation.accessor
- source: test'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Move file to dir (by renaming)'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tdir
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''file'
- source: .
  scopes:
    - punctuation.accessor
- source: test'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfile'
- source: '3'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\texpected"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: tfile
- source: '3'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: expected
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_cp_all'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fileX -> dir/fileX'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: clean up of the files happens inside the cleanup_leftovers function'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''wow'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''ex'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\told"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnew"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ex
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' old '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' new'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ex
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''great'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''ex'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ex
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\told"
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tnew"
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ex
- source: '2'
  scopes:
    - constant.numeric.integer
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ex
- source: '2'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' old'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' new'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' recurring on dir -> local dir'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' regression test for executive runs with overwrite := true'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: cp_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ex'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''nonexisting'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''nonexisting'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''ex'
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_of_empty_'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _works
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_non_existing'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tnon_existing_path"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''sdyfuisd_non_existing_file'''
- source: "\trpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: non_existing_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' on windows, the workdir is prepended, so the result is absolute:'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' rpath'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: ' non_existing_path'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' on unix, the workdir is NOT prepended for now, so the result remains the same.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO: the windows behaviour seems saner, think about normalising the unix case to do the same.'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: non_existing_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' non_existing_path'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_existing'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\texisting_file_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''existing_file'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\texisting_file"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: temp_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' existing_file_name'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''abc'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\trpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' rpath'
- source: .
  scopes:
    - punctuation.accessor
- source: ends_with
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: existing_file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_removes_dots'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\texamples_folder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '@VEXEROOT'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''vlib'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''v'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''cmd'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'examples'"
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\treal_path_of_examples_folder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: examples_folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' real_path_of_examples_folder'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: <
  scopes:
    - keyword.operator.relation
- source: ' examples_folder'
- source: .
  scopes:
    - punctuation.accessor
- source: len
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: real_path_of_examples_folder
- source: .
  scopes:
    - punctuation.accessor
- source: contains
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_absolutizes_existing_relative_paths'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\told_wd"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: getwd
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: old_wd
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '@VEXEROOT'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\texamples_folder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''vlib'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''v'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''cmd'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''examples'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\treal_path_of_examples_folder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: examples_folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: real_path_of_examples_folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO: think much more about whether this is desirable:'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_does_not_absolutize_non_existing_relative_paths'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\trelative_path"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''one'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''nonexisting_folder'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' '''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''something'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: relative_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: contains
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: relative_path
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' relative_path'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_realpath_absolutepath_symlink'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfile_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tolink_file'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\tsymlink_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''symlink'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' symlink_name'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\trpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: real_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: rpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' rpath'
- source: .
  scopes:
    - punctuation.accessor
- source: ends_with
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_tmpdir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tt"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: temp_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' t'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: t
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\ttfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 't '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: 'path_separator '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' ''tmpfile'
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' just in case'
  scopesEnd:
    - comment.line.double-slash
- source: "\ttfile_content"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''this'
- source: is
  scopes:
    - keyword.is
- source: a
  scopes:
    - entity.name.alias
- source: ' temporary file'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' tfile_content'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\ttfile_content_read"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' tfile_content_read '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' tfile_content'
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfile
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_is_writable_folder'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\ttmp"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: temp_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tf"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_writable_folder
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tmp
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''err: $err'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' f'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_make_symlink_check_is_link_and_remove_symlink'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfolder"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tfolder'''
- source: "\tsymlink"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tsymlink'''
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' windows creates a directory symlink, so delete it with rmdir()'
  scopesEnd:
    - comment.line.double-slash
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfolder_contents"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: ls
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' folder_contents'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' symlink'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tfolder_exists"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: folder
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' folder_exists '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: "\tsymlink_exists"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' symlink_exists '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_make_symlink_check_is_link_and_remove_symlink_with_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tfile'''
- source: "\tsymlink"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tsymlink'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' symlink'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tsymlink_exists"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' symlink_exists '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_make_hardlink_check_is_link_and_remove_hardlink_with_file'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfile"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tfile'''
- source: "\tsymlink"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''tsymlink'''
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' symlink'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tsymlink_exists"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_link
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: symlink
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' symlink_exists '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' fn test_fork() {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' pid := os.fork()'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' if pid == 0 {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''Child'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' else {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''Parent'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' fn test_wait() {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' pid := os.fork()'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' if pid == 0 {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''Child'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' exit(0)'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' else {'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' cpid := os.wait()'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''Parent'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(cpid)'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' }'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' test_symlink'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: symlink
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''symlink'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' cleanup'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''symlink'
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_is_executable_writable_readable'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfile_name"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''rwxfile'
- source: .
  scopes:
    - punctuation.accessor
- source: exe'
- source: "\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: $if
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: 'windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o600
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' mark as readable && writable, but NOT executable'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_writable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_readable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: is_executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o700
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' mark as executable too'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_writable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_readable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_executable
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' We finally delete the test file.'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: file_name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_ext'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''file'
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_ext
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''file'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_is_abs'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: home
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: user'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_abs_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:\\Windows\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_join'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''vlib'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''v\\vlib\\os'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''vlib'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os'
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_rmdir_all'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' dirs'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '''some'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: dir'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''some'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: .
  scopes:
    - punctuation.accessor
- source: hidden
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: directory'
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: for
  scopes:
    - keyword.control
- source: mut
  scopes:
    - storage.modifier
- source: ' d '
- source: in
  scopes:
    - keyword.control
- source: ' dirs '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\td"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: d
- source: .
  scopes:
    - punctuation.accessor
- source: replace
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' d '
- source: in
  scopes:
    - keyword.control
- source: ' dirs '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: d
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: is_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: d
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''some'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'false'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: '!'
  scopes:
    - keyword.operator.logical
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: exists
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''some'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_dir'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:\\a\\b\\c'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:\\a\\b'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:\\a\\b\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:\\a\\b'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: c'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:\\a\\b'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:\\a\\b'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: abc'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: var
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: tmp
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: foo'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: var
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: tmp'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: var
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: tmp
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: var
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: tmp'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:\\a\\b\\c'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''C:\\a\\b\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''C:'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: b'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''
- source: .
  scopes:
    - punctuation.accessor
- source: ''''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_base'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''filename'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''filename'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_file_name'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os\\os'
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os\\'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v\\vlib\\os'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' '''''
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''v'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: vlib
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: os'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''os'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_name
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''filename'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''filename'''
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_uname'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tu"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: uname
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' u'
- source: .
  scopes:
    - punctuation.accessor
- source: sysname
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' u'
- source: .
  scopes:
    - punctuation.accessor
- source: nodename
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' u'
- source: .
  scopes:
    - punctuation.accessor
- source: release
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' u'
- source: .
  scopes:
    - punctuation.accessor
- source: version
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' u'
- source: .
  scopes:
    - punctuation.accessor
- source: machine
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' tests for write_file_array and read_file_array<T>:'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopes:
    - storage.modifier
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: "\tmaxn"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '3'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: struct
  scopes:
    - keyword.struct
- source: ' IntPoint '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tx "
- source: int
  scopes:
    - storage.type.numeric
- source: "\ty "
- source: int
  scopes:
    - storage.type.numeric
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_write_file_array_'
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: bin'
- source: mut
  scopes:
    - storage.modifier
- source: ' arr'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'len: maxn'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ' maxn '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tarr"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '65'
  scopes:
    - constant.numeric.integer
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: i
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file_array
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' arr'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\trarr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' arr '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' rarr'
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln(arr.str())'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln(rarr.str())'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_write_file_array_structs'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: astructs
- source: .
  scopes:
    - punctuation.accessor
- source: bin'
- source: mut
  scopes:
    - storage.modifier
- source: ' arr'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: IntPoint
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: 'len: maxn'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ' maxn '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tarr"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: IntPoint
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '65'
  scopes:
    - constant.numeric.integer
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' i'
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '65'
  scopes:
    - constant.numeric.integer
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' i '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '10'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file_array
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' arr'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\trarr"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: read_file_array
- source: <
  scopes:
    - keyword.operator.relation
- source: IntPoint
- source: '>'
  scopes:
    - keyword.operator.relation
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' rarr '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' arr'
- source: assert
  scopes:
    - keyword.assert
- source: ' rarr'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' maxn'
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' eprintln( rarr.str().replace(''\n'', '' '').replace(''},'', ''},\n''))'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_stdout_capture'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: /*
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin
- source: "\tmut cmd := os.Command{"
- source: "\tpath:'cat'"
- source: "\tredirect_stdout: true"
- source: '}'
- source: cmd.start()
- source: 'for !cmd.eof {'
- source: "\tline := cmd.read_line()"
- source: "\tprintln('line=\"$line\"')"
- source: '}'
- source: cmd.close()
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block.documentation
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_posix_set_bit'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: 'true'
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tfpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''permtest'''
- source: "\t\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: chmod
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tc_fpath"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' s'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c_fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Take the permissions part of the mode'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' mode'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: assert
  scopes:
    - keyword.assert
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' `chmod u-r`'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_irusr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c_fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tmode"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: assert
  scopes:
    - keyword.assert
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 0o0377
  scopes:
    - constant.numeric.octal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' `chmod u+r`'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_irusr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c_fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tmode"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: assert
  scopes:
    - keyword.assert
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: setting the sticky bit is platform dependend'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' `chmod -s -g -t`'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_isuid
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_isgid
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_isvtx
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c_fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tmode"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: assert
  scopes:
    - keyword.assert
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 0o0777
  scopes:
    - constant.numeric.octal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' `chmod g-w o-w`'
  scopesEnd:
    - comment.line.double-slash
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_iwgrp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: posix_set_permission_bit
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: s_iwoth
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: stat
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c_fpath
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\tmode"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u32
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: .
  scopes:
    - punctuation.accessor
- source: st_mode
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0o7777
  scopes:
    - constant.numeric.octal
- source: assert
  scopes:
    - keyword.assert
- source: ' mode '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 0o0755
  scopes:
    - constant.numeric.octal
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: fpath
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_exists_in_system_path'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists_in_system_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: 'false'
  scopes:
    - constant.language
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists_in_system_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''cmd'
- source: .
  scopes:
    - punctuation.accessor
- source: exe'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: exists_in_system_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''ls'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_truncate'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test_trunc
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: write_
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: hello
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hello'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tnewlen"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: u64
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '40000'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: truncate
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' newlen'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' newlen '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_size
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_hostname'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: hostname
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '2'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_glob'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: mkdir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: '4'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' i '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '3'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: 0_
  scopes:
    - constant.numeric.integer
- source: another'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: "\t\t\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tcreate_file"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: 'test'' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' i'
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tfiles"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: glob
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: t
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' files'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '5'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: base
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: files
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''test'''
- source: for
  scopes:
    - keyword.control
- source: ' i '
- source: in
  scopes:
    - keyword.control
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: '3'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: 'test'' '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' i'
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test
- source: 0_
  scopes:
    - constant.numeric.integer
- source: another'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rmdir_all
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''test_dir'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_utime'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tfilename"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''
- source: .
  scopes:
    - punctuation.accessor
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: test_utime
- source: .
  scopes:
    - punctuation.accessor
- source: txt'
- source: "\thello"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''hello world'
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ''''
- source: mut
  scopes:
    - storage.modifier
- source: ' f'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: create
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tf"
- source: .
  scopes:
    - punctuation.accessor
- source: write_
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: hello
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tatime"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: time
- source: .
  scopes:
    - punctuation.accessor
- source: now
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: add_days
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '2'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: unix_time
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tmtime"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: time
- source: .
  scopes:
    - punctuation.accessor
- source: now
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: add_days
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '4'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: unix_time
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: utime
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: atime
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: int
  scopes:
    - meta.expr.numeric.cast
    - storage.type.numeric
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: mtime
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: file_last_mod_unix
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: filename
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' mtime'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_expand_tilde_to_home'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\thome_test"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: home_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''test'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''tilde'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''expansion'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\thome_expansion_test"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: expand_tilde_to_home
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '~'
  scopes:
    - keyword.operator.bitwise
- source: ''''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''test'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''tilde'''
- source: ','
  scopes:
    - punctuation.separator.comma
- source: "\t\t'expansion'"
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' home_test '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' home_expansion_test'
- source: assert
  scopes:
    - keyword.assert
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: expand_tilde_to_home
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '~'
  scopes:
    - keyword.operator.bitwise
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: home_dir
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_execute'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\tprint"
- source: '0'
  scopes:
    - constant.numeric.integer
- source: script
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: join_path_single
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: tfolder
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''print'
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopes:
    - punctuation.accessor
- source: v'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' The output of the next command contains a 0 byte in the middle.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Nevertheless, the execute function *should* return a string that'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' contains it.'
  scopesEnd:
    - comment.line.double-slash
- source: "\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: write_file
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: print
- source: '0'
  scopes:
    - constant.numeric.integer
- source: script
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' ''C'
- source: .
  scopes:
    - punctuation.accessor
- source: printf
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c"start
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: cMIDDLE
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: cfinish\nxx"
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: \n'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tos"
- source: .
  scopes:
    - punctuation.accessor
- source: rm
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: print
- source: '0'
  scopes:
    - constant.numeric.integer
- source: script
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\tresult"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: execute
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '''$'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: quoted_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '@VEXE'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: ' run $'
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: quoted_path
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: print
- source: '0'
  scopes:
    - constant.numeric.integer
- source: script
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: "\thexresult"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: result
- source: .
  scopes:
    - punctuation.accessor
- source: output
- source: .
  scopes:
    - punctuation.accessor
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: s
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: hex
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''exit_code: $result.exit_code'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''output: |$result.output|'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''output.len: $result.output.len'')'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' println(''output hexresult: $hexresult'')'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' result'
- source: .
  scopes:
    - punctuation.accessor
- source: 'exit_code '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: assert
  scopes:
    - keyword.assert
- source: ' hexresult'
- source: .
  scopes:
    - punctuation.accessor
- source: starts_with
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '7374617274004'
  scopes:
    - constant.numeric.integer
- source: d
- source: '4944444'
  scopes:
    - constant.numeric.integer
- source: c
- source: '450066696'
  scopes:
    - constant.numeric.integer
- source: e
- source: '697368'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: assert
  scopes:
    - keyword.assert
- source: ' hexresult'
- source: .
  scopes:
    - punctuation.accessor
- source: ends_with
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '0'
  scopes:
    - constant.numeric.integer
- source: a
- source: '7878'
  scopes:
    - constant.numeric.integer
- source: ''''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: fn
  scopes:
    - keyword.fn
- source: ' test_command'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' os'
- source: .
  scopes:
    - punctuation.accessor
- source: user_os
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '=='
  scopes:
    - keyword.operator.relation
- source: ' ''windows'' '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\teprintln"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: ''''
- source: '>>'
  scopes:
    - keyword.operator.bitwise
- source: '> os'
- source: .
  scopes:
    - punctuation.accessor
- source: Command
- source: is
  scopes:
    - keyword.is
- source: not
  scopes:
    - entity.name.alias
- source: ' implemented fully on Windows yet'''
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: return
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: mut
  scopes:
    - storage.modifier
- source: ' cmd'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: Command
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpath: 'ls'"
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcmd"
- source: .
  scopes:
    - punctuation.accessor
- source: start
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: cmd
- source: .
  scopes:
    - punctuation.accessor
- source: 'eof '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcmd"
- source: .
  scopes:
    - punctuation.accessor
- source: read_line
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcmd"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' dump( cmd )'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' cmd'
- source: .
  scopes:
    - punctuation.accessor
- source: 'exit_code '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' This will return a non 0 code'
  scopesEnd:
    - comment.line.double-slash
- source: mut
  scopes:
    - storage.modifier
- source: ' cmd_to_fail'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: os
- source: .
  scopes:
    - punctuation.accessor
- source: Command
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tpath: 'ls "
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: M'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcmd_to_fail"
- source: .
  scopes:
    - punctuation.accessor
- source: start
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: for
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.logical
- source: cmd_to_fail
- source: .
  scopes:
    - punctuation.accessor
- source: 'eof '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tcmd_to_fail"
- source: .
  scopes:
    - punctuation.accessor
- source: read_line
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\tcmd_to_fail"
- source: .
  scopes:
    - punctuation.accessor
- source: close
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' panic'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: err
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' dump( cmd_to_fail )'
  scopesEnd:
    - comment.line.double-slash
- source: assert
  scopes:
    - keyword.assert
- source: ' cmd_to_fail'
- source: .
  scopes:
    - punctuation.accessor
- source: 'exit_code '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' 2 on linux, 1 on macos'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
