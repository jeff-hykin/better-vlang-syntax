- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' Copyright (c) 2019-2022 Alexander Medvednikov. All rights reserved.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' Use of this source code is governed by an MIT license'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' that can be found in the LICENSE file.'
  scopesEnd:
    - comment.line.double-slash
- source: module
  scopesBegin:
    - meta.module
  scopes:
    - keyword.module
- source: os
  scopes:
    - entity.name.module
  scopesEnd:
    - meta.module
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: getenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' C.GetEnvironmentStringsW & C.FreeEnvironmentStringsW are defined only on windows'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: GetEnvironmentStringsW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - storage.type.numeric
- source: fn
  scopes:
    - keyword.fn
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: FreeEnvironmentStringsW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: u16
  scopes:
    - storage.type.numeric
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' `getenv` returns the value of the environment variable named by the key.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If there is not one found, it returns an empty string ''''.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' getenv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'key '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' getenv_opt'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: key
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: or
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' '''' '
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' `getenv_opt` returns the value of the environment variable named by the key'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' If there is not one found, it returns `none`.'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.definition.attribute
    - meta.function.attribute
  scopes:
    - punctuation.definition.begin.bracket.square
- source: manualfree
  scopes:
    - storage.modifier.attribute
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.definition.attribute
    - meta.function.attribute
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' getenv_opt'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'key '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '?'
  scopes:
    - keyword.operator.optional
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tkw"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: key
- source: .
  scopes:
    - punctuation.accessor
- source: to_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: defer
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tfree"
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: kw
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\ts"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: _wgetenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: kw
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' s '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: none
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\ts"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: getenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: key
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' s '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: none
  scopes:
    - constant.language
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' NB: C.getenv *requires* that the result be copied.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: ' c'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _to_v
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' os.setenv sets the value of an environment variable with `name` to `value`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' setenv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'name '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' value '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' overwrite '
- source: bool
  scopes:
    - meta.expr.bool.cast
    - storage.type.bool
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tformat"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''$name'
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $value'
- source: if
  scopes:
    - keyword.control
- source: ' overwrite '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _putenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: format
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: if
  scopes:
    - keyword.control
- source: ' getenv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: name
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _putenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: format
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: setenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: name
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: value
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ' overwrite'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' os.unsetenv clears an environment variable with `name`.'
  scopesEnd:
    - comment.line.double-slash
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' unsetenv'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: 'name '
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: int
  scopes:
    - storage.type.numeric
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tformat"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '''$name'
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: _putenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: format
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: return
  scopes:
    - keyword.control
- source: ' C'
- source: .
  scopes:
    - punctuation.accessor
- source: unsetenv
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: char
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: name
- source: .
  scopes:
    - punctuation.accessor
- source: str
- source: )
  scopesBegin:
    - punctuation.definition.bracket.round.end
- source: )
  scopesEnd:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' See: https://linux.die.net/man/5/environ for unix platforms.'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' See: https://docs.microsoft.com/bg-bg/windows/win32/api/processenv/nf-processenv-getenvironmentstrings'
- source: //
  scopes:
    - punctuation.definition.comment.begin
- source: ' os.environ returns a map of all the current environment variables'
  scopesEnd:
    - comment.line.double-slash
- source: fn
  scopes:
    - keyword.fn
- source: ' unix_environ'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '&'
  scopesBegin:
    - keyword.operator.bitwise
- source: '&'
  scopesEnd:
    - keyword.operator.bitwise
- source: 'char '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment.begin
- source: ' TODO: remove this helper function, when `&&char(C.environ)` works properly'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control
- source: voidptr
  scopes:
    - meta.expr.bool.cast
    - storage.type.voidptr
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: environ
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: pub
  scopes:
    - storage.modifier
- source: fn
  scopes:
    - keyword.fn
- source: ' environ'
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: map
  scopes:
    - keyword.map
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' res'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: map
  scopes:
    - keyword.map
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $if
  scopes:
    - keyword.control
- source: ' windows '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: mut
  scopes:
    - storage.modifier
- source: ' e'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: s
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: C
- source: .
  scopes:
    - punctuation.accessor
- source: GetEnvironmentStringsW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' eline'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: ''''''
- source: for
  scopes:
    - keyword.control
- source: ' c'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: e
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: 's; '
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: 'c '
- source: '!='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\teline"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _from_wide
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: c
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\teq_index"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: eline
- source: .
  scopes:
    - punctuation.accessor
- source: index_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '`'
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' eq_index '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tres"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: eline
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: eq_index
- source: ']'
  scopesBegin:
    - punctuation.definition.bracket.square.end
- source: ']'
  scopesEnd:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: eline
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: 'eq_index '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tc"
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: 'c '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ' eline'
- source: .
  scopes:
    - punctuation.accessor
- source: 'len '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: "\t\tC"
- source: .
  scopes:
    - punctuation.accessor
- source: FreeEnvironmentStringsW
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: e
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: s
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: $else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\tstart"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unix_environ
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: mut
  scopes:
    - storage.modifier
- source: ' i'
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.integer
- source: for
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\tx"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' start'
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: i
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: if
  scopes:
    - keyword.control
- source: ' x '
- source: '=='
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: break
  scopes:
    - keyword.control
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\teline"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: unsafe
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: ' c'
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: _to_v
- source: string
  scopes:
    - meta.expr.bool.cast
    - storage.type.string
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: x
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\teq_index"
- source: ':='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: eline
- source: .
  scopes:
    - punctuation.accessor
- source: index_
- source: byte
  scopes:
    - meta.expr.bool.cast
    - storage.type.byte
- source: (
  scopes:
    - punctuation.definition.bracket.round.begin
- source: '`'
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
- source: )
  scopes:
    - punctuation.definition.bracket.round.end
- source: if
  scopes:
    - keyword.control
- source: ' eq_index '
- source: '>'
  scopes:
    - keyword.operator.relation
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '{'
  scopes:
    - punctuation.definition.bracket.curly.begin
- source: "\t\t\t\tres"
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: eline
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: '0'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: eq_index
- source: ']'
  scopesBegin:
    - punctuation.definition.bracket.square.end
- source: ']'
  scopesEnd:
    - punctuation.definition.bracket.square.end
- source: '='
  scopes:
    - meta.definition.variable
    - keyword.operator.assignment
- source: eline
- source: '['
  scopes:
    - punctuation.definition.bracket.square.begin
- source: 'eq_index '
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: .
  scopesBegin:
    - punctuation.accessor
- source: .
  scopesEnd:
    - punctuation.accessor
- source: ']'
  scopes:
    - punctuation.definition.bracket.square.end
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
- source: "\t\t\ti"
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: '}'
  scopesBegin:
    - punctuation.definition.bracket.curly.end
- source: '}'
  scopesEnd:
    - punctuation.definition.bracket.curly.end
- source: return
  scopes:
    - keyword.control
- source: ' res'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end
